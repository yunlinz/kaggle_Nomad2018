import os
from util import *
import numpy as np
import multiprocessing

train_hex = {2, 5, 10, 12, 15, 17, 24, 31, 40, 44, 47, 50, 52, 54, 69, 77, 79, 83, 90, 94, 117, 129, 134, 158, 167, 171,
             174, 179, 185, 189, 193, 204, 210, 211, 215, 235, 239, 255, 279, 281, 290, 291, 293, 307, 321, 333, 336,
             337, 338, 339, 356, 358, 378, 379, 382, 383, 398, 404, 415, 422, 436, 447, 449, 452, 454, 456, 469, 478,
             481, 499, 514, 522, 551, 562, 563, 566, 577, 591, 594, 599, 606, 611, 612, 637, 639, 640, 642, 644, 647,
             661, 666, 667, 675, 680, 683, 684, 689, 697, 698, 706, 713, 719, 723, 731, 736, 738, 745, 751, 755, 762,
             763, 774, 778, 781, 809, 811, 813, 815, 827, 828, 833, 840, 852, 854, 863, 871, 879, 904, 915, 922, 924,
             925, 944, 953, 958, 975, 985, 986, 1001, 1002, 1016, 1019, 1020, 1044, 1049, 1052, 1053, 1063, 1067, 1068,
             1070, 1093, 1094, 1095, 1096, 1100, 1101, 1106, 1109, 1129, 1134, 1138, 1176, 1178, 1186, 1202, 1206, 1218,
             1226, 1235, 1236, 1250, 1262, 1271, 1284, 1300, 1302, 1308, 1330, 1332, 1335, 1347, 1357, 1358, 1362, 1380,
             1382, 1387, 1407, 1408, 1411, 1412, 1413, 1415, 1416, 1434, 1437, 1438, 1442, 1457, 1465, 1493, 1497, 1499,
             1528, 1529, 1536, 1552, 1554, 1555, 1559, 1566, 1576, 1590, 1592, 1597, 1608, 1619, 1630, 1638, 1649, 1653,
             1657, 1660, 1661, 1671, 1676, 1677, 1680, 1701, 1706, 1713, 1715, 1721, 1727, 1731, 1735, 1742, 1743, 1744,
             1750, 1751, 1758, 1768, 1770, 1772, 1777, 1778, 1782, 1788, 1789, 1793, 1795, 1803, 1811, 1813, 1821, 1829,
             1831, 1844, 1867, 1874, 1877, 1880, 1882, 1898, 1909, 1915, 1925, 1928, 1931, 1933, 1936, 1938, 1939, 1943,
             1948, 1955, 1958, 1976, 1981, 1984, 1985, 1987, 1993, 2004, 2011, 2012, 2015, 2022, 2033, 2051, 2054, 2062,
             2066, 2068, 2074, 2088, 2091, 2093, 2095, 2096, 2099, 2111, 2112, 2115, 2131, 2132, 2138, 2139, 2153, 2157,
             2162, 2172, 2174, 2178, 2180, 2185, 2200, 2203, 2206, 2207, 2209, 2211, 2219, 2225, 2232, 2240, 2243, 2249,
             2250, 2268, 2274, 2276, 2281, 2284, 2304, 2305, 2316, 2322, 2326, 2327, 2331, 2348, 2350, 2357, 2362, 2363,
             2371, 2372, 2375, 2394, 2395}

test_hex = {13, 16, 19, 33, 49, 54, 58, 63, 64, 65, 69, 70, 76, 90, 92, 96, 114, 115, 120, 128, 129, 143, 154, 166, 167,
            172, 183, 185, 186, 187, 191, 194, 195, 207, 209, 214, 219, 221, 223, 254, 264, 267, 272, 273, 275, 278,
            291, 293, 305, 316, 334, 346, 349, 350, 361, 366, 371, 373, 378, 381, 387, 392, 393, 407, 423, 434, 438,
            441, 443, 451, 455, 457, 468, 472, 474, 483, 486, 494, 496, 511, 515, 518, 530, 555, 557, 561, 567, 570,
            571, 598}


def augment_date(filename, repeats=10, fineness=1):
    sc = super_cell(filename)
    t0 = np.asarray([sc.to_tensor(fineness=fineness)])
    for _ in range(repeats):
        t0 = np.concatenate((t0,
                             np.asarray([
                                 sc.random_transform().to_tensor(fineness=fineness,
                                                                 gamma_al=1.0,
                                                                 gamma_ga=1.0,
                                                                 gamma_in=1.0,
                                                                 gamma_o=1.0)])))
    return t0


def augment_data2(filename, repeats=10, fineness=1):
    _, i, _ = filename.split('/')
    isHex = False
    if int(i) in train_hex:
        isHex = True
        print('{} is hexagonal'.format(i))
    sc = super_cell(filename, isHex)
    t0 = np.asarray([sc.to_tensor2(fineness=fineness, cell_size=13)])
    for _ in range(repeats):
        t0 = np.concatenate((t0,
                             np.asarray([
                                 sc.random_transform().to_tensor2(fineness=fineness, cell_size=13)])))
    return t0

def mk_aug_data(f):
    tensor = augment_data2('train/{}/geometry.xyz'.format(f))
    np.save('train/{}/tensor_aug2'.format(f), tensor)

if __name__ == '__main__':
    pool = multiprocessing.Pool(7)
    pool.map(mk_aug_data, os.listdir('train'))